package {	import flash.display.Sprite;	import flash.events.MouseEvent;	import com.greensock.TweenNano;	import flash.utils.Timer;	import flash.events.TimerEvent;	//http://gamedevelopment.tutsplus.com/tutorials/create-a-slot-machine-game-in-flash-using-as3--active-8127	public final class Main extends Sprite	{		var payTable:PayTable;		var timer:Timer;		var buttonS:ButtonS = new ButtonS();		var spinS:SpinS = new SpinS();		var stopS:StopS = new StopS();		var winS:WinS = new WinS();				public final function Main():void		{			/* Stop Items */						items1.stop();			items2.stop();			items3.stop();						/* Add Button Listeners */						buttonListeners('add');						/* Disable Spin Button */						buttons('disable', spinB);		}				private final function buttonListeners(e:String):void		{			if(e == 'add')			{				spinB.addEventListener(MouseEvent.MOUSE_UP, spinBtn);				betMaxB.addEventListener(MouseEvent.MOUSE_UP, betMax);				betOneB.addEventListener(MouseEvent.MOUSE_UP, betOne);				payTabB.addEventListener(MouseEvent.MOUSE_UP, payTableHandler);			}			else			{				spinB.removeEventListener(MouseEvent.MOUSE_UP, spinBtn);				betMaxB.removeEventListener(MouseEvent.MOUSE_UP, betMax);				betOneB.removeEventListener(MouseEvent.MOUSE_UP, betOne);				payTabB.removeEventListener(MouseEvent.MOUSE_UP, payTableHandler);			}		}				private final function buttons(action:String, ...btns):void		{			var btnsLen:int = btns.length;						if(action == 'enable')			{								for(var i:int = 0; i < btnsLen; i++)				{					btns[i].enabled = true;					btns[i].mouseEnabled = true;					TweenNano.to(btns[i], 0.5, {alpha:1});				}			}			else			{				for(var j:int = 0; j < btnsLen; j++)				{					btns[j].enabled = false;					btns[j].mouseEnabled = false;					TweenNano.to(btns[j], 0.5, {alpha:0.2});				}			}		}				private final function betMax(e:MouseEvent):void		{			/* Sound */						spinS.play();						/* Spin if enough credits */						if(int(creditsT.text) >= 3)			{				betT.text = '3';				buttons('disable', spinB, betOneB, betMaxB, payTabB);				spin();			}		}				private final function betOne(e:MouseEvent):void		{			/* Sound */						buttonS.play();						/* Bet One */						if(betT.text == '3')			{				betT.text = '1';			}			else			{				betT.text = String(int(betT.text) + 1);			}						/* Enable Spin Button */						if(spinB.enabled == false)			{				buttons('enable', spinB);			}		}				private final function payTableHandler(e:MouseEvent):void		{			/* Sound */						buttonS.play();						/* Show if not in stage */						if(payTable == null)			{				payTable = new PayTable();							payTable.x = stage.stageWidth * 0.5;				payTable.y = stage.stageHeight * 0.5;								addChild(payTable);				TweenNano.from(payTable, 0.2, {scaleX:0.4, scaleY:0.4});								/* Disable buttons */								buttons('disable', spinB, betMaxB, betOneB);			}			else			{				TweenNano.to(payTable, 0.2, {scaleX:0.1, scaleY:0.1, alpha:0, onComplete:function destroyPT():void{removeChild(payTable); payTable = null}});								/* Enable buttons */								if(betT.text != '0')				{					buttons('enable', spinB);				}								buttons('enable', betMaxB, betOneB);			}		}				private final function spinBtn(e:MouseEvent):void		{			/* Sound */						spinS.play();						/* Spin if enough credits */						if(int(creditsT.text) >= int(betT.text))			{				spin();				buttons('disable', spinB, betOneB, betMaxB, payTabB);			}		}				private final function spin():void		{			/* Add Won credits, if any */						creditsT.text = String(int(creditsT.text) + int(paidT.text));			paidT.text = '0';						/* Subtract Credits */						creditsT.text = String(int(creditsT.text) - int(betT.text));						/* Spin Items */						items1.play();			items2.play();			items3.play();						/* Spin Timer */						timer = new Timer(Math.floor(Math.random() * 1000) + 500);						timer.addEventListener(TimerEvent.TIMER, handleTimer);			timer.start();		}				private function handleTimer(e:TimerEvent):void		{			if(timer.currentCount == 1)			{				stopItem(items1.currentFrame, items1);								/* Sound */								stopS.play();			}						if(timer.currentCount == 2)			{				stopItem(items2.currentFrame, items2);								/* Sound */							stopS.play();			}						if(timer.currentCount == 3)			{				stopItem(items3.currentFrame, items3);								/* Sound */							stopS.play();								/* Stop Timer */								timer.stop();				timer.removeEventListener(TimerEvent.TIMER, handleTimer);				timer = null;								/* Enable buttons */							buttons('enable', spinB, betOneB, betMaxB, payTabB);								/* Check Items for a winning combination */								checkWin();			}		}				private final function stopItem(cFrame:int, targetItem:MovieClip):void		{			if(cFrame >= 2 && cFrame <= 5)			{				targetItem.gotoAndStop(5);			}			else if(cFrame >= 6 && cFrame <= 9)			{				targetItem.gotoAndStop(9);			}			else if(cFrame >= 10 && cFrame <= 13)			{				targetItem.gotoAndStop(13);			}			else if(cFrame >= 14 && cFrame <= 17)			{				targetItem.gotoAndStop(17);			}			else if(cFrame >= 18 && cFrame <= 21)			{				targetItem.gotoAndStop(21);			}			else if(cFrame >= 22 && cFrame <= 24)			{				targetItem.gotoAndStop(1);			}			else if(cFrame == 1)			{				targetItem.stop();			}		}				private final function checkWin():void		{			if(items1.currentLabel == items2.currentLabel && items2.currentLabel == items3.currentLabel)			{				/* Sound */								winS.play();								/* Get current label to determine item's value */								var lbl:String = items1.currentLabel;								if(lbl == 'a')				{					paidT.text = String(100 * int(betT.text));				}				else if(lbl == 'v')				{					paidT.text = String(50 * int(betT.text));				}				else if(lbl == 'p')				{					paidT.text = String(25 * int(betT.text));				}				else if(lbl == 'n')				{					paidT.text = String(10 * int(betT.text));				}			}		}	}}